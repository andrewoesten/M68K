<HTML><BODY>
<title>CMPA</title>

<H1>CMPA</H1>
<p>
<b>Operation:</b>  
<br>
<code>  </code>Destination - Source --&gt;; cc
<p>
<b>Assembler Syntax:</b>  
<br>
<code>  </code>CMPA  &lt;ea&gt;, An
<p>
<b>Attributes:</b>  Size = (Word, Long)
<p>
<b>Description:</b>  Subtracts the source operand from the destination
<br>
<code>  </code>address register and sets the condition codes according to the
<br>
<code>  </code>result; the data register is not changed.  The size of the operation
<br>
<code>  </code>can be word or long.
<p>
<b>Condition Codes:</b>
<br>
<br>
<code>  </code>X   Not affected.
<br>
<code>  </code>N   Set if the result is negative.  Cleared otherwise.
<br>
<code>  </code>Z   Set if the result is zero.  Cleared otherwise.
<br>
<code>  </code>V   Set if an overflow occurs.  Cleared otherwise.
<br>
<code>  </code>C   Set if a borrow occurs.  Cleared otherwise.
<p>
Note:<br>
CMPA does the same operation as SUBA but does<br>
set the flags and does not update any registers.<br>
CMPA is the only instruction which works with ADDRESS registers which set any flags.<br>
</BODY></HTML>

<HTML><BODY>
<title>MOVEM</title>

<H1>MOVEM</H1>
<p>
<b>Operation:</b>  
<br>
<code>  </code>Registers --&gt;; Destination
<br>
<code>  </code>Source --&gt;; Registers
<p>
<b>Assembler Syntax:</b>  (see Register Lists below)
<br>
<code>  </code>MOVEM  register list, &lt;ea&gt;
<br>
<code>  </code>MOVEM  &lt;ea&gt;, register list
<p>
<b>Attributes:</b>  Size = (Word, Long)
<p>
<b>Description:</b>  Moves the contents of selected register to or 
<br>
<code>  </code>from consecutive memory locations starting at the 
<br>
<code>  </code>location specified by the effective address.  A register is 
<br>
<code>  </code>selected if the bit in the mask field corresponding to that 
<br>
<code>  </code>register is set.  The instruction size determines whether 
<br>
<code>  </code>16 or 32 bits of each register are transferred.  In the 
<br>
<code>  </code>case of a word transfer to either address or data registers, 
<br>
<code>  </code>each word is sign extended to 32 bits, and the resulting 
<br>
<code>  </code>long word is loaded into the associated register.
<p>
<code>  </code>Selecting the address mode also selects the mode of 
<br>
<code>  </code>operation of the MOVEM instruction, and only the control 
<br>
<code>  </code>modes, the predecrement mode, and the postincrement 
<br>
<code>  </code>mode are valid.  If the effective address is specified by 
<br>
<code>  </code>one of the control modes, the registers are transferred 
<br>
<code>  </code>starting at the specified address, and the address is inc-
<br>
<code>  </code>remented by the operand length (2 or 4) following each 
<br>
<code>  </code>transfer.  The order of the registers is from data register 
<br>
<code>  </code>0 to data register 7, then from address register 0 to 
<br>
<code>  </code>address register 7.
<p>
<code>  </code>If the effective address is specified by the predecrement 
<br>
<code>  </code>mode, only a register-to-memory operation is allowed.  
<br>
<code>  </code>The registers are stored starting at the specified address 
<br>
<code>  </code>minus the operand length (2 or 4), and the address is dec-
<br>
<code>  </code>remented by the operand length following each transfer.  
<br>
<code>  </code>The order of storing is from address register 7 to address 
<br>
<code>  </code>register 0, then from data register 7 to data register 0.  
<br>
<code>  </code>When the instruction has completed, the decremented address 
<br>
<code>  </code>register contains the address of the last operand stored.  For 
<br>
<code>  </code>the MC68020, MC68030, and MC68040, if the addressing 
<br>
<code>  </code>register is also moved to memory, the value written is the 
<br>
<code>  </code>initial register value decremented by the size of the oper-
<br>
<code>  </code>ation.  The MC68000 writes the initial register value 
<br>
<code>  </code>(not decremented).
<p>
<code>  </code>If the effective address is specified by the postincrement mode, 
<br>
<code>  </code>only a memory-to-register operation is allowed.  The registers 
<br>
<code>  </code>are loaded starting at the specified address; the address is inc-
<br>
<code>  </code>remented by the operand length (2 or 4) following each 
<br>
<code>  </code>transfer.  The order of loading is the same as that of control 
<br>
<code>  </code>mode addressing.  When the instruction has completed, the 
<br>
<code>  </code>incremented address register contains the address of the last 
<br>
<code>  </code>operand plus the operand length.  If the addressing register is 
<br>
<code>  </code>also loaded from memory, the memory value is ignored and the 
<br>
<code>  </code>register is written with the postincremented effective address. 
<p>
<b>Condition Codes:</b>
<br>
<code>  </code>Not affected.
<p>
<code>  </code>Register List Mask field -- Specifies the register to be 
<br>
<code>  </code><code>  </code>transferred.  The low-order bit corresponds to the
<br>
<code>  </code><code>  </code>first register to be transferred; the high-order bit
<br>
<code>  </code><code>  </code>corresponds to the last register to be transferred. 
<br>
<code>  </code><code>  </code>Thus, both for control modes and for the postincrement
<br>
<code>  </code><code>  </code>mode addresses, the mask correspondence is:
<br>
A7,A6,A5,A4,A3,A2,A1,A0,D7,D6,D5,D4,D3,D2,D1,D0
<p>
<code>  </code><code>  </code>For the predecrement mode addresses, the mask
<br>
<code>  </code><code>  </code>correspondence is reversed:
<br>
D0,D1,D2,D3,D4,D5,D6,D7,A0,A1,A2,A3,A4,A5,A6,A7
<p>
<b>Register Lists:</b>
<br>
<code>  </code>The assembler syntax for register lists is as follows:
<br>
<code>  </code><code>  </code>1.  A range of registers is specified with a hyphen (minus
<br>
<code>  </code><code>  </code><code>  </code>sign) as in A0-A3.  Note that ranges must
<br>
<code>  </code><code>  </code><code>  </code>begin with the smaller of the two registers.  All
<br>
<code>  </code><code>  </code><code>  </code>data registers are considered smaller than all
<br>
<code>  </code><code>  </code><code>  </code>address registers, so D7-A0 is a legal range.
<br>
<code>  </code><code>  </code>2.  A set of distinct registers is specified by a list separated
<br>
<code>  </code><code>  </code><code>  </code>by slashes (division signs) as in D3/D7/A0.
<br>
<code>  </code><code>  </code><code>  </code>These may be in any order.
<br>
<code>  </code><code>  </code>3.  A combination of 1 and 2, such as A0-A3/D3/D6-D7
<br>
<code>  </code><code>  </code><code>  </code>may be specified.  The assembler just ignores registers 
<br>
<code>  </code><code>  </code><code>  </code>which are specified more than once, as in A3/A2-A4
<p>
</BODY></HTML>
